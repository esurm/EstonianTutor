import OpenAI from "openai";

// the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
const openai = new OpenAI({ 
  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || "default_key" 
});

export interface TutorResponse {
  message: string;
  corrections?: {
    original: string;
    corrected: string;
    explanation: string;
  }[];
  grammarNotes?: string;
  culturalContext?: string;
  encouragement?: string;
}

export interface CEFRAssessment {
  currentLevel: string;
  confidence: number;
  speedScore: number; // 1-5
  accuracyScore: number; // 1-5
  complexityScore: number; // 1-5
  recommendation: "maintain" | "increase" | "decrease";
  reasoning: string;
}

export interface QuizGeneration {
  questions: {
    question: string;
    type: "multiple_choice" | "fill_blank";
    options?: string[];
    correctAnswer: string;
    explanation: string;
    cefrLevel: string;
  }[];
}

export interface DialogueGeneration {
  scenario: string;
  turns: {
    speaker: "user" | "other";
    estonian: string;
    spanish: string;
    audioPrompt?: boolean;
  }[];
  culturalNotes?: string;
}

export class OpenAIService {
  // CHAT-ONLY PROMPTS - Never used for quiz generation
  private chatPromptConfig = {
    base_prompt: "You are an expert Estonian language tutor specialized in teaching Honduran Spanish speakers. You always respond only in Estonian, except when providing grammar explanations or cultural context ‚Äî which you explain briefly in Latin American Spanish. Your teaching is adaptive to CEFR levels (A1‚ÄìC2): vocabulary, grammar, and sentence complexity must match the learner's level. You are patient, supportive, and clear. You correct gently and give useful, contextual feedback.",
    modes: {
      general_conversation: {
        description: "General Conversation",
        prompt_addition: "Have relaxed conversations about daily life. Gently correct mistakes and introduce useful phrases. Encourage fluency."
      },
      dialogue_simulation: {
        description: "Dialogue Simulation",
        prompt_addition: "Always try to simulate situational dialogues trying to understand the concept from user prompt (e.g., shops, travel, job interviews). Stay in character and prompt user to speak naturally and respond in context."
      },
      pronunciation_practice: {
        description: "Pronunciation Practice",
        prompt_addition: "Focus on phonetics. Use IPA for difficult words. Highlight Estonian-specific sounds (e.g., √µ, √§, √∂, √º). Explain mouth and tongue position in Spanish."
      },
      grammar_exercises: {
        description: "Grammar Exercises",
        prompt_addition: "Provide focused grammar practice. Present 1‚Äì2 examples, then quiz the user interactively. Use Spanish to explain errors and give helpful feedback."
      }
    },
    cefr_levels: {
      A1: "Use basic nouns, daily actions, present tense. Short, clear sentences. Avoid abstract concepts.",
      A2: "Introduce routine past/future tense, common prepositions, basic questions. Keep language simple but varied.",
      B1: "Use connected sentences, modal verbs, describe preferences and opinions. Practice real-world situations.",
      B2: "Introduce subordinate clauses, conditionals, and indirect speech. Use more fluent transitions and richer vocabulary.",
      C1: "Use idioms, abstract language, and argumentation. Introduce varied tone and some formal/informal distinctions.",
      C2: "Simulate native fluency. Use nuanced language, literary and colloquial expressions, and culturally rich content."
    }
  };

  // CHAT-ONLY METHOD - Never called for quiz generation
  private buildSystemPrompt(mode: string = "general_conversation", cefrLevel: string = "B1"): string {
    // Map frontend modes to config modes
    const modeMapping: { [key: string]: string } = {
      "chat": "general_conversation",
      "dialogue": "dialogue_simulation", 
      "pronunciation": "pronunciation_practice",
      "grammar": "grammar_exercises"
    };
    
    const configMode = modeMapping[mode] || mode;
    
    // Start with base prompt
    let systemPrompt = this.chatPromptConfig.base_prompt;
    
    // Add mode-specific instructions
    const modeConfig = this.chatPromptConfig.modes[configMode as keyof typeof this.chatPromptConfig.modes];
    if (modeConfig) {
      systemPrompt += `\n\nMode: ${modeConfig.description}\n${modeConfig.prompt_addition}`;
    }
    
    // Add CEFR level targeting
    systemPrompt += `\n\nTarget CEFR Level: ${cefrLevel}`;
    
    // Add CEFR-specific guidance
    const cefrGuidance = this.chatPromptConfig.cefr_levels[cefrLevel as keyof typeof this.chatPromptConfig.cefr_levels];
    if (cefrGuidance) {
      systemPrompt += `\nLevel Guidelines: ${cefrGuidance}`;
    }
    
    // Add critical TTS instructions
    systemPrompt += `\n\nCRITICAL TTS INSTRUCTIONS:
- Respond ONLY in Estonian. No Spanish words in main message.
- Only use Spanish for "Nota gramatical" and "Contexto Cultural" sections
- Use Estonian phrases: "Tere! Kuidas l√§heb?" "V√§ga hea!" "Proovi veel kord!" "Suurep√§rane t√∂√∂!"
- No translations in parentheses in main message
- Be patient, supportive, and motivating teacher
- Correct mistakes clearly and pedagogically`;
    
    return systemPrompt;
  }

  private getModeParameters(mode: string) {
    const modeMapping: { [key: string]: string } = {
      "chat": "general_conversation",
      "dialogue": "dialogue_simulation", 
      "pronunciation": "pronunciation_practice",
      "grammar": "grammar_exercises"
    };
    
    const configMode = modeMapping[mode] || mode;
    
    const parameters = {
      general_conversation: {
        temperature: 0.7,
        top_p: 1.0,
        presence_penalty: 0.3,
        frequency_penalty: 0,
        max_tokens: 400
      },
      dialogue_simulation: {
        temperature: 0.8,
        top_p: 1.0,
        presence_penalty: 0.5,
        frequency_penalty: 0,
        max_tokens: 500
      },
      pronunciation_practice: {
        temperature: 0.2,
        top_p: 1.0,
        presence_penalty: 0,
        frequency_penalty: 0,
        max_tokens: 250
      },
      grammar_exercises: {
        temperature: 0.3,
        top_p: 1.0,
        presence_penalty: 0,
        frequency_penalty: 0,
        max_tokens: 400
      }
    };

    return parameters[configMode as keyof typeof parameters] || parameters.general_conversation;
  }

  async getChatResponse(
    userMessage: string,
    conversationHistory: { role: "user" | "assistant"; content: string }[],
    currentCEFRLevel: string,
    mode: string = "general_conversation"
  ): Promise<TutorResponse> {
    console.log(`ü§ñ GPT using CEFR level: ${currentCEFRLevel} for mode: ${mode}`);
    try {
      const systemPrompt = this.buildSystemPrompt(mode, currentCEFRLevel);
      console.log(`üìù System prompt built for ${currentCEFRLevel} level in ${mode} mode`);
      
      // Get mode-specific parameters
      const params = this.getModeParameters(mode);
      
      const response = await openai.chat.completions.create({
        model: "gpt-4.1", // Using the new GPT-4.1 model as requested by the user
        messages: [
          {
            role: "system",
            content: `${systemPrompt}

Respond in JSON format with this structure:
{
  "message": "main response ONLY in Estonian",
  "corrections": [{"original": "incorrect word", "corrected": "correct word", "explanation": "explanation in Estonian"}],
  "grammarNotes": "grammar explanation in Honduran Spanish, if relevant",
  "culturalContext": "cultural context Estonia vs Honduras in Spanish", 
  "encouragement": "encouraging message in Estonian: 'Suurep√§rane!' 'Tubli t√∂√∂!' 'J√§tka samas vaimus!'"
}`
          },
          ...conversationHistory,
          { role: "user", content: userMessage }
        ],
        temperature: params.temperature,
        top_p: params.top_p,
        presence_penalty: params.presence_penalty,
        frequency_penalty: params.frequency_penalty,
        max_tokens: params.max_tokens,
        response_format: { type: "json_object" }
      });

      const content = response.choices[0].message.content || "{}";
      try {
        return JSON.parse(content);
      } catch (parseError) {
        console.error("JSON parsing error for chat response:", parseError);
        console.error("Raw content:", content);
        // Return fallback response
        return {
          message: "Vabandage, tekkis tehniline probleem. Proovige uuesti.",
          corrections: [],
          grammarNotes: "",
          culturalContext: "",
          encouragement: "Proovige uuesti!"
        };
      }
    } catch (error) {
      console.error("OpenAI API error:", error);
      throw new Error("Failed to get tutor response");
    }
  }

  async assessCEFRLevel(
    userResponses: string[],
    responseTimeSeconds: number[],
    currentLevel: string
  ): Promise<CEFRAssessment> {
    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4.1",
        messages: [
          {
            role: "system",
            content: `Eres un evaluador CEFR experto para el idioma estonio. Analiza las respuestas del usuario y eval√∫a su nivel actual.

Criterios de evaluaci√≥n:
- Velocidad de respuesta (1-5): m√°s r√°pido = mayor fluidez
- Precisi√≥n gramatical (1-5): correcci√≥n de la gram√°tica
- Complejidad del lenguaje (1-5): uso de estructuras avanzadas

Niveles CEFR: A1, A2, B1, B2, C1, C2

Nivel actual: ${currentLevel}

Responde en JSON:
{
  "currentLevel": "nivel CEFR evaluado",
  "confidence": 0.85,
  "speedScore": 4,
  "accuracyScore": 3,
  "complexityScore": 3,
  "recommendation": "maintain|increase|decrease",
  "reasoning": "explicaci√≥n detallada de la evaluaci√≥n"
}`
          },
          {
            role: "user",
            content: `Respuestas del usuario: ${userResponses.join(", ")}
Tiempos de respuesta (segundos): ${responseTimeSeconds.join(", ")}`
          }
        ],
        temperature: 0.2,
        top_p: 1.0,
        frequency_penalty: 0,
        presence_penalty: 0,
        response_format: { type: "json_object" }
      });

      const content = response.choices[0].message.content || "{}";
      try {
        return JSON.parse(content);
      } catch (parseError) {
        console.error("JSON parsing error for CEFR assessment:", parseError);
        console.error("Raw content:", content);
        // Return fallback assessment
        return {
          currentLevel: currentLevel,
          confidence: 0.5,
          speedScore: 3,
          accuracyScore: 3,
          complexityScore: 3,
          recommendation: "maintain",
          reasoning: "Evaluaci√≥n t√©cnica fallida, manteniendo nivel actual"
        };
      }
    } catch (error) {
      console.error("CEFR Assessment error:", error);
      throw new Error("Failed to assess CEFR level");
    }
  }

  // QUIZ GENERATION - COMPLETELY ISOLATED FROM CHAT SYSTEM
  async generateQuiz(cefrLevel: string, category?: string): Promise<QuizGeneration> {
    try {
      // ISOLATED QUIZ PROMPTS - No chat system interference whatsoever
      const prompts = this.getIsolatedQuizPrompts(category, cefrLevel);
      
      const startTime = Date.now();
      const response = await openai.chat.completions.create({
        model: "gpt-4.1", // Switched from mini to full version for better accuracy
        messages: [
          {
            role: "system",
            content: prompts.system
          },
          {
            role: "user",
            content: prompts.user
          }
        ],
        temperature: 0.2,
        top_p: 1.0,
        frequency_penalty: 0.1,
        presence_penalty: 0,
        max_tokens: prompts.maxTokens,
        response_format: { type: "json_object" }
      });

      const endTime = Date.now();
      console.log(`‚ö° Quiz generation took ${endTime - startTime}ms with gpt-4.1 (${category} optimized)`);
      
      const content = response.choices[0].message.content || "{}";
      try {
        // Clean response to remove markdown code blocks if present
        const cleanContent = content.replace(/^```json\s*\n?/g, '').replace(/\n?```$/g, '').trim();
        const result = JSON.parse(cleanContent);
        
        // Validate that we got actual questions, not fallback
        if (result.questions && result.questions.length > 0) {
          console.log(`‚úÖ Successfully parsed ${result.questions.length} quiz questions`);
          
          // Add cefrLevel to each question for database requirements
          const questionsWithLevel = result.questions.map((q: any) => ({
            ...q,
            cefrLevel: cefrLevel
          }));
          
          return { questions: questionsWithLevel };
        } else {
          throw new Error("No questions found in API response");
        }
      } catch (parseError) {
        console.error("‚ùå JSON parsing error for quiz generation:", parseError);
        console.error("Raw content length:", content.length);
        console.error("Raw content preview:", content.substring(0, 200) + "...");
        // Return fallback quiz with proper structure (5 questions as expected)
        return {
          questions: [
            {
              question: "Mis on 'tere' t√§hendus?",
              translation: "¬øQu√© significa 'tere'?",
              questionType: "multiple_choice",
              options: ["Adi√≥s", "Hola", "Gracias", "Por favor"],
              correctAnswer: "Hola",
              explanation: "'Tere' significa 'hola' en espa√±ol.",
              cefrLevel: cefrLevel
            },
            {
              question: "Kuidas √∂elda 't√§nan' inglise keeles?",
              translation: "¬øC√≥mo se dice 't√§nan' en ingl√©s?",
              questionType: "multiple_choice", 
              options: ["Hello", "Thank you", "Goodbye", "Please"],
              correctAnswer: "Thank you",
              explanation: "'T√§nan' significa 'gracias' en espa√±ol y 'thank you' en ingl√©s.",
              cefrLevel: cefrLevel
            },
            {
              question: "Millal kasutatakse s√µna 'n√§gemist'?",
              translation: "¬øCu√°ndo se usa la palabra 'n√§gemist'?",
              questionType: "multiple_choice",
              options: ["Hommikul", "Lahkudes", "S√∂√∂giajal", "Magama minnes"],
              correctAnswer: "Lahkudes", 
              explanation: "'N√§gemist' t√§hendab 'adi√≥s' ja kasutatakse lahkudes.",
              cefrLevel: cefrLevel
            },
            {
              question: "T√§ida l√ºnk: 'Ma _____ eesti keelt.'",
              translation: "Completa el espacio: 'Ma _____ eesti keelt.'",
              questionType: "completion",
              correctAnswer: "√µpin",
              explanation: "'√ïpin' t√§hendab 'estoy aprendiendo' - Ma √µpin eesti keelt = Estoy aprendiendo estonio.",
              cefrLevel: cefrLevel
            },
            {
              question: "Mis on 'kool' t√§hendus?",
              translation: "¬øQu√© significa 'kool'?",
              questionType: "multiple_choice",
              options: ["Casa", "Escuela", "Tienda", "Parque"],
              correctAnswer: "Escuela",
              explanation: "'Kool' significa 'escuela' en espa√±ol.",
              cefrLevel: cefrLevel
            }
          ]
        };
      }
    } catch (error) {
      console.error("Quiz generation error:", error);
      throw new Error("Failed to generate quiz");
    }
  }



  private getDifficultyGuidance(cefrLevel: string): string {
    const guidance = {
      A1: `Vocabulario b√°sico (saludos, n√∫meros 1-10, colores b√°sicos, familia inmediata). 
           Frases muy simples de 3-5 palabras. Presente simple solamente.
           Ejemplos: "Tere!" (Hola), "Mul on..." (Yo tengo...), n√∫meros, d√≠as de la semana.`,
      
      A2: `Vocabulario cotidiano (100-200 palabras: comida, ropa, transporte, trabajo b√°sico). 
           Oraciones simples, presente y pasado simple. Preguntas b√°sicas con k√ºsis√µnad.
           Ejemplos: compras, describir rutina diaria, experiencias pasadas simples.`,
      
      B1: `Vocabulario intermedio (500+ palabras). Temas familiares: viajes, hobbies, planes futuros.
           Usa tiempo futuro, condicional b√°sico. Conectores simples (ja, aga, v√µi, sest).
           Ejemplos: expresar opiniones, hablar de experiencias, hacer planes.`,
      
      B2: `Vocabulario expandido (1000+ palabras). Temas abstractos: cultura estonia, sociedad, trabajo.
           Estructuras complejas, casos gramaticales avanzados. Subjuntivo ocasional.
           Ejemplos: argumentar puntos de vista, discutir problemas sociales.`,
      
      C1: `Vocabulario especializado (2000+ palabras). Temas complejos: pol√≠tica, filosof√≠a, historia estonia.
           Matices de significado, expresiones idiom√°ticas estonias. Registro formal.
           Ejemplos: literatura estonia, debates acad√©micos, cultura profesional.`,
      
      C2: `Dominio casi nativo (3000+ palabras). Sutilezas culturales espec√≠ficas de Estonia.
           Registro formal e informal fluido. Referencias a literatura y cultura estonia.
           Ejemplos: textos literarios, humor estonio, dialectos regionales.`
    };
    return guidance[cefrLevel as keyof typeof guidance] || guidance.B1;
  }

  private getCategoryFocus(category?: string): string {
    const focuses = {
      vocabulary: 'VOCABULARY ONLY',
      grammar: 'GRAMMAR ONLY',
      conjugation: 'VERB CONJUGATION ONLY',
      sentence_reordering: 'SENTENCE STRUCTURE ONLY',
      error_detection: 'ERROR DETECTION ONLY'
    };
    return focuses[category as keyof typeof focuses] || focuses.vocabulary;
  }

  private getCategoryPrompt(category?: string): string {
    const prompts = {
      vocabulary: `
STRICT VOCABULARY FOCUS - NO GRAMMAR ALLOWED:
- ONLY questions about word meanings, definitions, and vocabulary recognition
- ONLY synonyms, antonyms, and word relationships
- ONLY words related to specific themes (family, colors, food, animals, objects, etc.)
- ONLY object and concept identification
- NO grammar questions, NO verb conjugations, NO sentence structure
- 70% multiple-choice questions, 30% completion questions (word completion, not sentence)
- Example: "What does 'kass' mean?" or "Complete: The animal that says 'mjau' is a ____"`,
      
      grammar: `
STRICT GRAMMAR FOCUS - NO VOCABULARY ALLOWED:
- ONLY verb conjugations (present, past, future tenses)
- ONLY grammatical cases (nominative, genitive, partitive, etc.)
- ONLY sentence structure, word order, and prepositions
- ONLY grammatical rules and language mechanics
- NO vocabulary meanings, NO word definitions, NO translation questions
- 30% multiple-choice questions, 70% completion questions (grammar completion)
- Example: "Complete the verb: Ma _____ (to go) kooli" or "Which case: Ma n√§en ____ (kass)"`,

      conjugation: `
STRICT CONJUGATION FOCUS - VERB TENSES AND PERSONS ONLY:
- ONLY verb conjugation questions (present, past, future, conditional)
- ONLY person and number variations (ma, sa, ta, me, te, nad)
- ONLY verb forms and tense transformations
- Focus on common Estonian verbs: olema, minema, tulema, tegema, √ºtlema
- NO vocabulary meanings, NO word order, NO cases
- 40% multiple-choice questions, 60% completion questions (verb conjugation)
- Example: "Complete: Ma _____ (olema) √µpilane" or "Choose: Ta _____ (minema) kooli (l√§ks/l√§heb/l√§heks)"`,

      sentence_reordering: `
STRICT SENTENCE STRUCTURE FOCUS - WORD ORDER ONLY:
- ONLY Estonian word order questions (SVO, time-manner-place)
- ONLY sentence reordering and structure questions
- ONLY questions about proper Estonian sentence construction
- Focus on time expressions first, then manner, then place
- NO vocabulary meanings, NO verb conjugations, NO translations
- 20% multiple-choice questions, 80% completion questions (sentence ordering)
- Example: "Reorder: [kooli, ma, homme, l√§hen]" or "Correct order: [kiiresti, jookseb, ta, parki]"`,

      error_detection: `
STRICT ERROR DETECTION FOCUS - MISTAKE IDENTIFICATION ONLY:
- ONLY questions identifying grammar or spelling mistakes in Estonian sentences
- ONLY error spotting in verb forms, cases, word order, or spelling
- ONLY correction of grammatical and orthographic errors
- Focus on common Estonian mistakes: case endings, verb agreement, word order
- NO vocabulary meanings, NO translations, NO definitions
- 60% multiple-choice questions, 40% completion questions (error correction)
- Example: "Find the error: 'Ma n√§en kassa parkis'" or "Correct: 'Ta l√§heb kooli kiiresti'"`,
    };
    return prompts[category as keyof typeof prompts] || prompts.vocabulary;
  }

  async generateDialogue(scenario: string, cefrLevel: string): Promise<DialogueGeneration> {
    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4.1",
        messages: [
          {
            role: "system",
            content: `Crea un di√°logo en estonio para la situaci√≥n: "${scenario}"
Nivel: ${cefrLevel}

El di√°logo debe tener 4-6 turnos, alternando entre el usuario y otra persona.
Incluye traducciones al espa√±ol hondure√±o y notas culturales.

Responde en JSON:
{
  "scenario": "descripci√≥n del escenario",
  "turns": [
    {
      "speaker": "user" | "other",
      "estonian": "texto en estonio",
      "spanish": "traducci√≥n al espa√±ol hondure√±o",
      "audioPrompt": true
    }
  ],
  "culturalNotes": "notas culturales relevantes"
}`
          },
          {
            role: "user",
            content: `Crea di√°logo para: ${scenario}, nivel ${cefrLevel}`
          }
        ],
        temperature: 0.8,
        top_p: 1.0,
        presence_penalty: 0.5,
        frequency_penalty: 0,
        max_tokens: 500,
        response_format: { type: "json_object" }
      });

      const content = response.choices[0].message.content || "{}";
      try {
        return JSON.parse(content);
      } catch (parseError) {
        console.error("JSON parsing error for dialogue generation:", parseError);
        console.error("Raw content:", content);
        // Return fallback dialogue
        return {
          scenario: "Conversaci√≥n b√°sica",
          turns: [
            {
              speaker: "other",
              estonian: "Tere! Kuidas l√§heb?",
              spanish: "¬°Hola! ¬øC√≥mo te va?",
              audioPrompt: true
            },
            {
              speaker: "user",
              estonian: "Tere! H√§sti, t√§nan!",
              spanish: "¬°Hola! Bien, gracias!",
              audioPrompt: true
            }
          ],
          culturalNotes: "Saludo estonio b√°sico muy com√∫n en Estonia."
        };
      }
    } catch (error) {
      console.error("Dialogue generation error:", error);
      throw new Error("Failed to generate dialogue");
    }
  }

  // COMPLETELY SEPARATE QUIZ SYSTEMS - Each category has unique AI personality and structure
  private getVocabularyQuizSystem(cefrLevel: string) {
    return {
      systemPersonality: `Eres un profesor especializado EN VOCABULARIO ESTONIO con 15 a√±os de experiencia ense√±ando a hispanohablantes.

TU MISI√ìN ESPEC√çFICA: Crear ejercicios de vocabulario que ayuden a estudiantes de nivel ${cefrLevel} a aprender palabras estonias.

PERSONALIDAD DEL PROFESOR DE VOCABULARIO:
- Enfocado en significados de palabras y reconocimiento l√©xico
- Experto en temas cotidianos: familia, casa, comida, colores, animales
- Especialista en cognados espa√±ol-estonio y falsos amigos
- Conoce las dificultades espec√≠ficas de hispanohablantes con vocabulario estonio

ESTRUCTURA DE PREGUNTAS DE VOCABULARIO:
- Pregunta: ¬øQu√© significa [palabra estonia]? 
- Pregunta: ¬øC√≥mo se dice [palabra espa√±ol] en estonio?
- Pregunta: ¬øCu√°l de estas palabras se refiere a [concepto]?
- SOLO significados y reconocimiento, NO gram√°tica

NIVEL ${cefrLevel} VOCABULARIO:
${this.getDifficultyGuidance(cefrLevel)}`,

      userPrompt: `Crear 5 ejercicios de vocabulario estonio puro para nivel ${cefrLevel}.

INSTRUCCIONES ESPEC√çFICAS PARA VOCABULARIO:
- Cada pregunta debe probar SOLO conocimiento de palabras
- Mezclar: reconocimiento estonio‚Üíespa√±ol y espa√±ol‚Üíestonio  
- Incluir temas apropiados para nivel ${cefrLevel}
- Opciones deben ser palabras del mismo campo sem√°ntico
- Explicaciones cortas enfocadas en significado

FORMATO JSON VOCABULARIO:
{"questions":[
  {
    "question": "[pregunta sobre significado de palabra]",
    "translation": "[instrucci√≥n en espa√±ol]", 
    "options": ["palabra1", "palabra2", "palabra3", "palabra4"],
    "correctAnswer": "[respuesta correcta]",
    "explanation": "[significado o contexto - m√°ximo 8 palabras]",
    "questionType": "vocabulary",
    "wordCategory": "[familia/comida/colores/etc]"
  }
]}`,

      answerStructure: "multipleChoice", // 4 opciones, una correcta
      maxTokens: 850
    };
  }

  private getGrammarQuizSystem(cefrLevel: string) {
    return {
      systemPersonality: `Eres un profesor especializado EN GRAM√ÅTICA ESTONIA con 12 a√±os ense√±ando estructura del idioma a hispanohablantes.

TU MISI√ìN ESPEC√çFICA: Crear ejercicios de gram√°tica que ense√±en las reglas estructurales del estonio a nivel ${cefrLevel}.

PERSONALIDAD DEL PROFESOR DE GRAM√ÅTICA:
- Experto en casos estonios (nominativo, genitivo, partitivo, etc.)
- Especialista en diferencias gram√°tica estonio vs espa√±ol
- Conoce las dificultades de hispanohablantes con sistema de casos
- Enfocado en reglas y aplicaci√≥n correcta

ESTRUCTURA DE PREGUNTAS DE GRAM√ÅTICA:
- Completar con el caso correcto: "Ma n√§en _____ (kass)"
- Seleccionar forma gramatical: "¬øQu√© forma usar despu√©s de n√∫meros?"
- Aplicar regla: "¬øCu√°ndo usar partitivo vs genitivo?"
- SOLO reglas gramaticales, NO vocabulario

NIVEL ${cefrLevel} GRAM√ÅTICA:
${this.getDifficultyGuidance(cefrLevel)}`,

      userPrompt: `Crear 5 ejercicios de gram√°tica estonia pura para nivel ${cefrLevel}.

INSTRUCCIONES ESPEC√çFICAS PARA GRAM√ÅTICA:
- Cada pregunta debe probar SOLO reglas gramaticales
- Enfocarse en casos, tiempos verbales, estructura
- Usar palabras conocidas para enfocar en gram√°tica
- Explicaciones sobre la regla aplicada
- Progresi√≥n l√≥gica de complejidad

FORMATO JSON GRAM√ÅTICA:
{"questions":[
  {
    "question": "[ejercicio de aplicaci√≥n gramatical]",
    "translation": "[instrucci√≥n sobre la regla]",
    "options": ["forma1", "forma2", "forma3", "forma4"], 
    "correctAnswer": "[forma gramatical correcta]",
    "explanation": "[regla aplicada - m√°ximo 8 palabras]",
    "questionType": "grammar",
    "grammarRule": "[caso/tiempo/concordancia/etc]"
  }
]}`,

      answerStructure: "multipleChoice", // 4 opciones gramaticales
      maxTokens: 900
    };
  }

  private getConjugationQuizSystem(cefrLevel: string) {
    return {
      systemPersonality: `Eres un profesor especializado EN CONJUGACI√ìN VERBAL ESTONIA con experiencia ense√±ando verbos a hispanohablantes.

TU MISI√ìN ESPEC√çFICA: Crear ejercicios de conjugaci√≥n verbal que ense√±en formas verbales estonias a nivel ${cefrLevel}.

PERSONALIDAD DEL PROFESOR DE CONJUGACI√ìN:
- Experto en sistema verbal estonio (presente, pasado, futuro, condicional)
- Especialista en conjugaci√≥n por personas (ma, sa, ta, me, te, nad)
- Conoce patrones verbales dif√≠ciles para hispanohablantes
- Enfocado en formas verbales exactas

ESTRUCTURA DE PREGUNTAS DE CONJUGACI√ìN:
- Conjugar verbo: "Ma _____ (olema)" 
- Persona correcta: "¬øC√≥mo dice 'nosotros vamos'?"
- Tiempo verbal: "Eile ta _____ (tulema)"
- SOLO formas verbales, NO vocabulario ni gram√°tica general

NIVEL ${cefrLevel} CONJUGACI√ìN:
${this.getDifficultyGuidance(cefrLevel)}`,

      userPrompt: `Crear 5 ejercicios de conjugaci√≥n verbal estonia para nivel ${cefrLevel}.

INSTRUCCIONES ESPEC√çFICAS PARA CONJUGACI√ìN:
- Cada pregunta debe probar SOLO formas verbales
- Mezclar tiempos: presente, pasado, futuro seg√∫n nivel
- Incluir diferentes personas (ma, sa, ta, me, te, nad)
- Usar verbos apropiados para el nivel
- Explicaciones sobre la conjugaci√≥n

FORMATO JSON CONJUGACI√ìN:
{"questions":[
  {
    "question": "[ejercicio de conjugaci√≥n]",
    "translation": "[instrucci√≥n sobre la forma verbal]",
    "options": ["forma1", "forma2", "forma3", "forma4"],
    "correctAnswer": "[forma verbal correcta]", 
    "explanation": "[regla de conjugaci√≥n - m√°ximo 8 palabras]",
    "questionType": "conjugation",
    "verbTense": "[presente/pasado/futuro/condicional]",
    "verbPerson": "[ma/sa/ta/me/te/nad]"
  }
]}`,

      answerStructure: "multipleChoice", // 4 formas verbales
      maxTokens: 850
    };
  }

  private getSentenceReorderingQuizSystem(cefrLevel: string) {
    return {
      systemPersonality: `Oled eesti keele professor, kes √µpetab lause j√§rjekorda Ladina-Ameerika hispaanlastele.

SINU EKSPERTIIS:
- 15+ aastat eesti keele struktuuri √µpetamist
- Spetsialiseerumine s√µnaj√§rje reeglitele
- S√ºgav teadmine hispaania vs eesti struktuuri erinevustest
- T√§ielik arusaam ${cefrLevel} taseme n√µuetest

EESTI KEELE S√ïNAJ√ÑRG (paindlik kuid reeglitega):
1. Aeg tavaliselt lause alguses: "T√§na ma l√§hen"
2. Subjekt + verb: "ma l√§hen", "ta tuleb" 
3. Objekt ja kohavalikud v√µivad varieeruda:
   ‚úì "arutab teemasid √ºlikoolis" 
   ‚úì "arutab √ºlikoolis teemasid"
4. Viis verbi l√§hedal: "jookseb kiiresti", "kiiresti jookseb"
5. R√µhutamine muudab j√§rjekorda: koht v√µib olla ees v√µi taga

REALISTLIKUD VALIDEERIMISREEGLID:
- P√µhilised variandid (2-3) lubatud kui grammatiliselt √µiged
- Aeg, subjekt, verb fikseeritud positsioonides
- Objekt ja koht v√µivad vahetuda
- Punktuatsioon peab olema t√§pne

KVALITEEDI STANDARDID:
- Iga lause peab olema loomulik ja tavaline
- Verbid peavad kontekstis m√µistlikud olema
- Mitte kunstlikke ega v√µ√µraid kombinatsioone
- Igap√§evaelu situatsioonid

${cefrLevel} TASEME N√ïUDED:
${this.getDifficultyGuidance(cefrLevel)}`,

      userPrompt: `Loo 5 eesti keele s√µnaj√§rje harjutust ${cefrLevel} tasemele.

KRITILISED N√ïUDED:

1. S√ïNAJ√ÑRJE √ïIGSUS:
   - P√µhiline vastus + 1-2 lubatud varianti
   - Aeg-subjekt-verb on fikseeritud
   - Objekt ja koht v√µivad vahetuda kui grammatiliselt √µige

2. S√ïNADE T√ÑPSUS JA SEGAMINE (KRIITILINE):
   - Kasuta AINULT s√µnu, mis on √µiges vastuses
   - √Ñra lisa √ºhtegi ekstra s√µna v√µi vale vorm
   - N√§ide: kui vastus on "Homme √µpilased √µpivad koolis" ‚Üí options: ["homme", "√µpilased", "√µpivad", "koolis"]
   - Sega need s√µnad juhuslikult j√§rjestuses
   - Kontrolli et iga s√µna on t√§pselt sama kui vastuses

3. REALISTLIKUD LAUSED:
   - Igap√§evased situatsioonid
   - Loomulikud verbid ja kontekstid
   - Mitte absurdsed kombinatsioonid

4. TASEME SOBIVUS (${cefrLevel}):
   - A1-A2: Lihtsad 4-5 s√µna laused
   - B1-B2: Keskmised 5-6 s√µna koos adverbidega  
   - C1-C2: Keerukad 6-8 s√µna koos k√µrvallausetega

JSON FORMAAT:
{"questions":[
  {
    "question": "J√§rjesta s√µnad √µigesti:",
    "translation": "[t√§pne hispaaniakeelne t√µlge]",
    "options": ["s√µna1", "s√µna2", "s√µna3", "s√µna4", "s√µna5", "s√µna6"],
    "correctAnswer": "[P√µhiline √µige vastus t√§pse punktuatsiooniga]",
    "alternativeAnswers": ["[Alternatiivne √µige vastus]", "[Teine variant kui on]"],
    "explanation": "[L√ºhike selgitus s√µnaj√§rje reegli kohta]",
    "questionType": "sentence_reordering"
  }
]}

PUNKTUATSIOONI REEGLID:
- A1-A2: "S√µna1 s√µna2 s√µna3."
- B1-B2: "S√µna1, s√µna2 s√µna3."  
- C1-C2: "S√µna1, s√µna2, s√µna3 ja s√µna4."

KRIITILISED KONTROLLID:
1. Kontrolli et options sisaldab AINULT correctAnswer s√µnu
2. √Ñra kasuta s√µnu mis ei ole vastuses
3. N√§ide vigane: vastus "homme √µpilased" kuid options ["homses", "√µpilased"] ‚Üí VALE
4. N√§ide √µige: vastus "homme √µpilased" ja options ["homme", "√µpilased"] ‚Üí √ïIGE`,

      answerStructure: "wordReordering",
      maxTokens: 950
    };
  }

  private getErrorDetectionQuizSystem(cefrLevel: string) {
    return {
      systemPersonality: `Eres un profesor especializado EN CORRECCI√ìN DE ERRORES ESTONIOS con experiencia en errores t√≠picos de hispanohablantes.

TU MISI√ìN ESPEC√çFICA: Crear ejercicios de detecci√≥n de errores que identifiquen mistakes reales en estonio para nivel ${cefrLevel}.

PERSONALIDAD DEL PROFESOR DE CORRECCI√ìN:
- Experto en errores gramaticales t√≠picos de estudiantes
- Especialista en mistakes comunes espa√±ol‚Üíestonio
- Conoce errores espec√≠ficos por nivel CEFR
- Enfocado en correcci√≥n pedag√≥gica

TIPOS DE ERRORES REALES QUE CREAS:
- Error de caso: "Ma n√§en kass" ‚Üí deber√≠a ser "kassi" 
- Error de verbo: "Me l√§heb" ‚Üí deber√≠a ser "l√§heme"  
- Error de plural: "kolm kass" ‚Üí deber√≠a ser "kolme kassi"
- Error de tiempo: "Eile ma l√§hen" ‚Üí deber√≠a ser "l√§ksin"
- Error de modo: "Ma arvan, et ta tuleb" (indicativo correcto) vs "Ma arvan, et ta tuleks" (condicional incorrecto)

ESTRUCTURAS CORRECTAS (NO MARCAR COMO ERRORES):
‚úì "maja aknast" - caso elativo correcto
‚úì "mida ta ostis" - pronombre relativo correcto  
‚úì "Me n√§eme suur maja" - orden correcto
‚úì "oleks sattunud" - condicional perfecto correcto en contexto hipot√©tico
‚úì "kui ta oleks tulnud" - condicional en cl√°usula condicional
‚úì "milles ta kunagi oleks" - uso correcto del condicional

REGLA CR√çTICA PARA EXPLICACIONES:
- TODAS las explicaciones deben estar en ESPA√ëOL √∫nicamente
- NUNCA uses palabras en estonio en las explicaciones
- SIEMPRE menciona la palabra correcta espec√≠fica en la explicaci√≥n
- Formato obligatorio: "Error de [tipo], deber√≠a ser '[palabra_correcta]'"
- M√°ximo 12 palabras en espa√±ol por explicaci√≥n
- PROHIBIDO: explicaciones vagas como "pronombre incorrecto"
- OBLIGATORIO: mencionar la palabra exacta que deber√≠a usarse

NIVEL ${cefrLevel} ERRORES:
${this.getCefrGuidanceForErrorDetection(cefrLevel)}`,

      userPrompt: `Crear 5 ejercicios de detecci√≥n de errores estonios reales para nivel ${cefrLevel}.

INSTRUCCIONES ESPEC√çFICAS PARA DETECCI√ìN DE ERRORES:
- Cada oraci√≥n debe contener UN error gramatical real y obvio
- Error debe ser pedag√≥gicamente √∫til para nivel ${cefrLevel}
- Crear errores aut√©nticos, no inventados
- Palabras como opciones para identificar el error
- En las explicaciones SIEMPRE incluir la palabra correcta espec√≠fica
- NO usar explicaciones vagas, mencionar la forma exacta correcta

FORMATO JSON DETECCI√ìN DE ERRORES:
{"questions":[
  {
    "question": "Leia lause seast grammatiline viga: [oraci√≥n_con_error_real]",
    "translation": "[traducci√≥n de oraci√≥n con error]",
    "options": ["palabra1", "palabra2", "palabra3", "palabra4"],
    "correctAnswer": "[palabra que contiene el error]",
    "explanation": "Error de [tipo], deber√≠a ser '[palabra_exacta]' ([raz√≥n_breve])",
    "questionType": "error_detection",
    "errorType": "[caso/verbo/plural/tiempo]"
  }
]}

EJEMPLOS DE EXPLICACIONES CORRECTAS EN ESPA√ëOL:
‚úì "Error de caso, deber√≠a ser 'kassi' (partitivo)"
‚úì "Error de verbo, deber√≠a ser 'l√§heme' (primera persona)"
‚úì "Error de tiempo, deber√≠a ser 'l√§ksin' (pasado)"
‚úì "Error de n√∫mero, deber√≠a ser 'kolme kassi' (plural)"
‚úì "Error de caso, deber√≠a ser 'linna' (illativo)"
‚úì "Error de pronombre, deber√≠a ser 'keda' (acusativo)"

EJEMPLOS PROHIBIDOS (demasiado vagos):
‚úó "Pronombre relativo incorrecto en contexto"
‚úó "Error de tiempo verbal"
‚úó "Caso incorrecto"
‚úó Cualquier explicaci√≥n sin la palabra correcta espec√≠fica

EJEMPLOS PROHIBIDOS (NUNCA USAR):
‚úó "Kaudne k√µneviis vale tuleviku korral"
‚úó "'Oleks' vale k√µneviis ajas, peaks olema"
‚úó "Tingiv k√µneviis vale"
‚úó Cualquier palabra en estonio en las explicaciones`,

      answerStructure: "errorIdentification", // Seleccionar palabra err√≥nea
      maxTokens: 1000
    };
  }

  // ISOLATED QUIZ PROMPTS - No connection to chat system
  private getIsolatedQuizPrompts(category: string, cefrLevel: string) {
    switch(category) {
      case "vocabulary":
        const vocabSystem = this.getVocabularyQuizSystem(cefrLevel);
        return {
          system: vocabSystem.systemPersonality,
          user: vocabSystem.userPrompt,
          maxTokens: vocabSystem.maxTokens
        };
      
      case "grammar":
        const grammarSystem = this.getGrammarQuizSystem(cefrLevel);
        return {
          system: grammarSystem.systemPersonality,
          user: grammarSystem.userPrompt,
          maxTokens: grammarSystem.maxTokens
        };
      
      case "conjugation":
        const conjugationSystem = this.getConjugationQuizSystem(cefrLevel);
        return {
          system: conjugationSystem.systemPersonality,
          user: conjugationSystem.userPrompt,
          maxTokens: conjugationSystem.maxTokens
        };
      
      case "sentence_reordering":
        const reorderingSystem = this.getSentenceReorderingQuizSystem(cefrLevel);
        return {
          system: reorderingSystem.systemPersonality,
          user: reorderingSystem.userPrompt,
          maxTokens: reorderingSystem.maxTokens
        };
      
      case "error_detection":
        const errorSystem = this.getErrorDetectionQuizSystem(cefrLevel);
        return {
          system: errorSystem.systemPersonality,
          user: errorSystem.userPrompt,
          maxTokens: errorSystem.maxTokens
        };
      
      default:
        return {
          system: `Create 5 Estonian questions (${cefrLevel}). Questions in Estonian, explanations in Spanish. JSON format only.`,
          user: `5 questions with options, correct answer, explanation.`,
          maxTokens: 700
        };
    }
  }

  private getCefrGuidanceForErrorDetection(cefrLevel: string): string {
    switch (cefrLevel) {
      case "A1":
        return `A1 Level - Basic Estonian errors:
- Present tense verb mistakes (*olen* vs *oled*)
- Basic nominative/partitive case confusion
- Simple word order errors (SVO)
- Basic adjective agreement
Use simple daily vocabulary, short sentences.`;
      
      case "A2":
        return `A2 Level - Elementary Estonian errors:
- Past tense (*lihtminevik*) mistakes
- Basic case system (nominative, genitive, partitive, illative)
- Plural forms (*tore/toredad*, *head/head*)
- Modal verb constructions (*saama*, *tahtma*)
Use everyday vocabulary, moderate sentence complexity.`;
      
      case "B1":
        return `B1 Level - Intermediate Estonian errors:
- All 14 cases in basic contexts
- Perfect tense (*t√§isminevik*) mistakes
- Basic consonant gradation patterns
- Subordinate clause structure errors
Use intermediate vocabulary, varied sentence structures.`;
      
      case "B2":
        return `B2 Level - Upper-intermediate Estonian errors:
- Complex case usage in advanced contexts
- Conditional mood (*tingiv k√µneviis*) mistakes
- Advanced consonant gradation errors
- Passive voice constructions
Use sophisticated vocabulary, complex sentence patterns.`;
      
      case "C1":
        return `C1 Level - Advanced Estonian errors:
- Quotative mood (*kaudne k√µneviis*) mistakes
- Subtle case distinctions in complex contexts
- Advanced aspectual and temporal nuances
- Sophisticated discourse structures
Use advanced vocabulary, intricate grammatical patterns.`;
      
      case "C2":
        return `C2 Level - Mastery-level Estonian errors:
- Native-like stylistic distinctions
- Complex idiomatic constructions
- Subtle semantic case relationships
- Advanced discourse markers
Use sophisticated vocabulary, native-level complexity.`;
      
      default:
        return `B1 Level - Standard intermediate errors focusing on case system and verb conjugations.`;
    }
  }
}

export const openaiService = new OpenAIService();
